---
title: "Week 8: Tidy Data"
author: "Joe Nese"
institute: "University of Oregon<br>Fall 2024"
format:
  revealjs: 
    theme: default
    highlight-style: github
    incremental: false
    fig-width: 9
    fig-height: 3.5
    scrollable: true
    multiplex: true
execute: 
  echo: true
  warning: false
embed-resources: true
---

```{r setup, include=FALSE}
library(tidyverse)
library(rio)
library(knitr)
library(here)
library(janitor)
library(kableExtra)
library(palmerpenguins)
library(countdown)
library(gt)

```


# Tidy Data 

Week 8


## Share

[`{tidylog}`](https://github.com/elbersb/tidylog)

* Provides feedback about `{dplyr}` and `{tidyr}` operations

[view link]{style='color:#D55E00'}

## How I feel about my `R` code sometimes

![](./images/mr_rodgers.png)

## Agenda

* Introduce the concept of tidy data
* Tidy a simple dataset together with `{tidyr}`
* Summarize and transform tidy data with `{dplyr}`

**Learning Objectives**

* Understand that the concept of tidy data is useful
* Understand and be able to apply the `pivot_longer()` and `pivot_wider()` functions


## 

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/b467ee99-87e3-4663-ae27-aaf027f940ce_rw_1920.png?h=0573cb8b960ba2f2c8486188761f03e0){width="70%"}

::: aside
Credit [Allison Horst](https://allisonhorst.com/data-science-art)
:::

## Providing grammar for: {.smaller}

* Graphics 
  + `{ggplot2}`
* Data manipulations 
  + `{dplyr}`
  + `{tidyr}`
* Expanding area of specialized topics
  + `{lubridate}`
  + `{glue}`
  + `{tidymodels}`
* Many more...

## Providing grammar for: {.smaller}

* Graphics 
  + `{ggplot2}`
* Data manipulations
  + `{dplyr}`
  + <mark>`{tidyr}`</mark>
* Expanding area of specialized topics
  + `{lubridate}`
  + `{glue}`
  + `{tidymodels}`
* Many more...


# `{tidyr}`

## `{dplyr}` vs `{tidyr}` {.smaller}

:::: {.columns}

::: {.column width="50%"}

`{dplyr} `

Helps you manipulate your data

* `select()`
* `filter()`
* `mutate()`
* `summarize()`
* more...
:::

::: {.column width="50%" .fragment}

`{tidyr}`

Helps you get your data into a tidy format

* `pivot_longer()`
* `pivot_wider()`
* `separate_wider_position()` and `separate_wider_delim()`
* `separate_wider_regex()`
* `unite()`
* `nest()`
:::

::::

## Data cleaning

> “It is often said that 80% of data analysis is spent on the process of cleaning and preparing the data (Dasu & Johnson, 2003).”
> - Hadley Wickham (Tidy Data)

. . .

* Persistent and varied challenge
* Little research on how to do it well

## [Activity]{style='color:#0072B2'}

Run this code

```{r}
#| eval: false
library(rio)
library(here)
library(tidyverse)

star <- import(here("data", "star.csv")) %>% 
  as_tibble()
```

. . .

```{r}
#| echo: false
(star <- import(here("data", "star.csv")) %>% 
  as_tibble())
```

## [Produce this plot]{style='color:#0072B2'}

What do we need here?

```{r}
#| echo: false
star %>% 
  ggplot(aes(treadss, tmathss)) +
  geom_point() +
  theme_minimal()
```

## [Great! Now produce this plot]{style='color:#0072B2'}

What's different?

```{r}
#| echo: false
star %>% 
  ggplot(aes(treadss, tmathss, color = frl)) +
  geom_point() +
  theme_minimal()
```

## [Awesome! Now this one]{style='color:#0072B2'}

```{r}
#| echo: false
star %>% 
  pivot_longer(
    cols = c(white, black),
    names_to = "foo",
    values_to = "race"
  ) %>% 
  mutate(race = ifelse(race == 1, "white", "black")) %>% 
  ggplot(aes(treadss, tmathss, color = race)) +
  geom_point() +
  theme_minimal() +
  labs(color = "")
```

##

![](https://media1.giphy.com/media/nTfdeBvfgzV26zjoFP/giphy.gif?cid=ecf05e47ss10hzpu9f3yca3n0kgavkxygbxncmuh2hww3vpz&ep=v1_gifs_search&rid=giphy.gif&ct=g)



## Tidy Data {.smaller}

* Each variable is a column
* Each observation is a row
* Each cell is a single measurement
* Each type of observational unit forms a table
    + We won’t talk much about this point

![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)
  
::: aside
[R4DS](https://r4ds.had.co.nz/tidy-data.html)
:::

## 

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/85520b8f-4629-4763-8a2a-9ceff27458bf_rw_1920.jpg?h=21007b20ac00cf37318dca645c215453)

::: aside
[Allison Horst](https://allisonhorst.com/other-r-fun)
:::

## Common ways data are "messy"

* Column headers are values, not variable names
* Multiple variables stored in one column
* Variables are stored in both rows and columns
* See the pivoting [vignette](https://tidyr.tidyverse.org/articles/pivot.html) for examples and solutions

## 
![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/6e297111-efb7-4555-93d2-085071d1853c_rw_1920.jpg?h=f1951b118eaddaaab8a572422bc16566)

::: aside
[Allison Horst](https://allisonhorst.com/other-r-fun)
:::

## Defining tidy data

**Essentially, two rules define tidy data** ^[[Modern Data Science with R](https://mdsr-book.github.io/)]

1. Each row is a case representing the same underlying attribute
2. Each column is a variable containing the same type of value for each case

The combination of rows and columns make each observational unit (row) unique, even though cells may be repeated many times (e.g., student identifier)

## Why tidy? {.smaller}

* There are many reasons why you might want to have "messy" data
    + e.g., for other software or specific modeling purposes

. . .

* However, tidy data is an **extremely** useful format generally, and particularly useful when applying tools within the `{tidyverse}`

. . .

* All packages within the `{tidyverse}` are designed to either help you get your data in a tidy format, or assume your data are already in a tidy format

. . .

* Assuming a common data format leads to large jumps in efficiency, as the output from certain functions can be directly input into others

##

![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/fc9b748b-db96-4ed4-aa23-f6e0ffc866ee_rw_1920.jpg?h=8fa394b572089354aa87b1d602b0f887)

::: aside
[Allison Horst](https://allisonhorst.com/other-r-fun)
:::

## 
![](https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png)

::: asdie
[R4DS](https://r4ds.had.co.nz/tidy-data.html)
:::

##

![](https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExamZrNTVpdmkzNDl2YnNpMmFpbDQzMHU1M2N5NTc4cjI4OGEzNW04diZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/oCjCwnuLpiWbfMb1UA/giphy.webp)


## `pivot_*()`

Talk with a neighbor about what you think `pivot_longer()` and `pivot_wider()` do

```{r, echo=FALSE}
countdown(minutes = 1, seconds = 30, bottom = 0, warn_when = 30)
```



## `{tidyr}` verbs {.smaller}

`pivot_longer()`
: "lengthens" data, increasing the number of rows and decreasing the number of columns

. . .


`pivot_wider()`
: "widens" data, increasing the number of columns and decreasing the number of rows

. . .


`separate_wider_position()` and `separate_wider_delim()`
: turns a single character column into multiple columns

. . .


`separate_wider_regex()`
: given a [regular expression](https://r4ds.had.co.nz/strings.html#matching-patterns-with-regular-expressions) for capturing groups, turns each group into a new column

. . .


`unite()`
: paste together multiple columns into one

. . .


`nest()`
: creates a list-column of data frames; you get one row for each group defined by the non-nested columns. This is useful in conjunction with other summaries that work with whole datasets, like models

* **so** powerful

# `pivot_longer()`

## `pivot_longer()`

There are different ways to `pivot_longer()` that will depend on what your data look like 

## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "!2,3,4,11"
pivot_longer(
  data,
  cols,
  names_to = "name",
  names_prefix = NULL,
  names_sep = NULL,
  names_pattern = NULL,
  names_ptypes = list(),
  names_transform = list(),
  names_repair = "check_unique",
  values_to = "value",
  values_drop_na = FALSE,
  values_ptypes = list(),
  values_transform = list(),
)
```
:::

::: {.column width="50%"}
:::

:::: 

## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "|2|3|4|5"
pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value", 
)
```
:::

::: {.column width="50%"}
:::

:::: 

## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "2"
pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value",
)
```
:::

::: {.column width="50%"}
a data frame to pivot
```{r, eval=FALSE}
df %>% 
  pivot_wider()
```


*or*

```{r, eval=FALSE}
pivot_wider(df)
```
:::

:::: 

## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "3"
pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value",
)
```
:::

::: {.column width="50%"}
The names of the `col`umns you want to pivot into longer format
:::

:::: 


## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "4"
pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value",
)
```
:::

::: {.column width="50%"}
A string specifying the name of the **new** column to create from the data stored in the `col`umn names of data

Can be a character vector, creating multiple columns, if `names_sep` or `names_pattern` is provided
:::

:::: 


## `pivot_longer()`

:::: {.columns}

::: {.column width="50%"}
```{r, eval=FALSE}
#| code-line-numbers: "5"
pivot_longer(
  data, 
  cols, 
  names_to = "name", 
  values_to = "value",
)
```
:::

::: {.column width="50%"}
A string specifying the name of the **new** column to create from the data stored in cell values of the `col`umns
:::

:::: 

## Messy data

What makes this data messy? Or, why is this data not tidy?

```{r}
tidyr::relig_income
```

## Messy data

Column headers are values (data!), not variable names

```{r, highlight.output = c(2)}
tidyr::relig_income
```

## Let's `pivot_longer()` 

Necessary arguments

* `data` - of course
* `cols` – which columns you will pivot longer
* `names_to` – new variable name (in quotes) for those `cols`
* `values_to` – new variable name (in quotes) for the cell values

## Let's `pivot_longer()` {.smaller}

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = _____,
  names_to = "_____",
  values_to = "_____"
 )

```

. . .

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()` {.smaller}

Which `cols` do we want to pivot?

. . .

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = c(`<$10k`:`>150k`),
  names_to = "_____",
  values_to = "_____"
 )

```

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()` {.smaller}

Which `cols` do we want to pivot?

. . .

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = -1,
  names_to = "_____",
  values_to = "_____"
 )

```

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()` {.smaller}

Which `cols` to we want to pivot?

. . .

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = -religion,
  names_to = "_____",
  values_to = "_____"
 )

```

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()` {.smaller}

Those `cols` names will become a new column.

What should we that new column of `col names`?

. . .

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = -religion,
  names_to = "income",
  values_to = "_____"
 )

```

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()` {.smaller}

The values of those "income" `cols` will become a new column.

What should we that new column of `col values`?

. . .

```{r, eval=FALSE}
relig_income %>% 
 pivot_longer(
  cols = -religion,
  names_to = "income",
  values_to = "frequency"
 )

```

```{r, echo=FALSE}
relig_income
```

## Let's `pivot_longer()`

```{r}
#| output-location: fragment
relig_income %>% 
  pivot_longer(
    cols = -religion,
    names_to = "income",
    values_to = "frequency"
  )
```

## Why are tidy data useful? {.smaller}

When used with `{dplyr}`, tidy data can result in large gains in efficiency

For example, suppose we want to calculate the percent of respondents in each income category `by` *religion*

. . .

**First** let's save our pivoted data

```{r}
relig_long <- relig_income %>% 
  pivot_longer(
    cols = -religion,
    names_to = "income",
    values_to = "frequency"
  ) 
```

## Why are tidy data useful? {.smaller}

**Then** let's relevel the `income` variable so it is ordered in a meaningful way

```{r}
relig_long <- relig_long %>% 
  mutate(income = fct_relevel(income, 
                              "Don't know/refused", 
                              "<$10k", 
                              "$10-20k", 
                              "$20-30k", 
                              "$30-40k", 
                              "$40-50k", 
                              "$50-75k", 
                              "$75-100k", 
                              "$100-150k", 
                              ">150k")) 
```

## Why are tidy data useful? {.smaller}

**Now** let's group by `religion` to create a `pct` variable that indicates the percent of respondents in each income category *within* each religion category

```{r}
relig_long %>% 
  group_by(religion) %>% 
  mutate(pct = frequency/sum(frequency) * 100)
```

## Why are tidy data useful? {.smaller}

**Now** we can facet by religion and see all data at once!

```{r}
relig_long %>% 
  group_by(religion) %>% 
  mutate(pct = frequency/sum(frequency) * 100) %>% 
  ggplot(aes(income, pct)) +
  geom_point() +
  geom_line(group = 1) +
  facet_wrap(~religion)
```

## Messy data {.smaller}

Many variables in column names

`tidyr::who` (modified slightly)

```{r, echo=FALSE, highlight.output = c(2)}
(who_r <- who %>% 
  rename_with(~str_replace(., "newrel", "new_rel"), .cols = contains("rel")) %>% 
  rename_with(~str_replace(., "m", "m_"), .cols = contains("new_")) %>% 
  rename_with(~str_replace(., "f", "f_"), .cols = contains("new_")))
```


## Messy data {.smaller}

Many variables in column names

:::: {.columns}

::: {.column width="40%"}
Example column names

[new_]{style='color:#D55E00'}[sp_]{style='color:#009E73'}[m_]{style='color:#0072B2'}[014]{style='color:#CC79A7'}

[new_]{style='color:#D55E00'}[rel_]{style='color:#009E73'}[f_]{style='color:#0072B2'}[65]{style='color:#CC79A7'}
:::

::: {.column width="60%" .fragment}
all `col` names start with [new_]{style='color:#D55E00'}, which we don't need

followed by a diagnosis category: ["sp_" "sn_" "ep_" "rel_"]{style='color:#009E73'}

then [gender]{style='color:#0072B2'}, which in these data are limited to ["m_"]{style='color:#0072B2'} or ["f_"]{style='color:#0072B2'}

and last an [age range]{style='color:#CC79A7'}

<u>and</u> these are separated by underscores `_` which is quite convenient, as we'll see
:::

::::

. . .

That's a lot of information in the column names!

## Messy data

Many variables in column names

Necessary arguments

* `data` - of course
* `cols` – which columns you will pivot longer
* `names_to` – new variable name**s** (in quotes) for those `cols`
* `values_to` – new variable name (in quotes) for the cell values

. . .

* <mark>`names_separate` – how to *separate* those `cols` names</mark>

## Let's apply it

```{r}
#| code-line-numbers: "|1|3|4|5|6"
who_r %>%
 pivot_longer(
  cols = new_sp_m_014:new_rel_f_65,
  names_to = c("new", "diagnosis", "sex", "age"), 
  names_sep = "_",
  values_to = "count"
)
```

## Don’t get discouraged

* This is tricky!
* Takes practice
* Takes trial and error
* Takes looking at the [help documentation](https://tidyr.tidyverse.org/reference/pivot_longer.html) and the [vignette](https://tidyr.tidyverse.org/articles/pivot.html) - <u>a lot</u>
* Takes trial and error!
* But you are ~~rarely~~ never gifted with tidy data

## Declaring `cols` to `pivot_longer` {.smaller}

We can declare the columns to pivot other ways

The important part is just being clear which columns should be part of the gather

All of the below are equivalent

:::: {.columns}

::: {.column width="50%"}
`relig_income` data

```{r, eval=FALSE}
relig_income %>% 
  pivot_longer(
    cols = -religion,
    ...
```

```{r, eval=FALSE}
relig_income %>% 
  pivot_longer(
    cols = -1,
    ...
```

```{r, eval=FALSE}
names(relig_income) %>% 
  pivot_longer(
    cols = c(`<$10k`:`Don't know/refused`),
    ...
```
:::

::: {.column width="50%"}
`who` data

```{r, eval=FALSE}
names(who) %>% 
  pivot_longer(
    cols = new_sp_m_014:new_rel_f_65,
    ...
```

```{r, eval=FALSE}
names(who) %>% 
  pivot_longer(
    cols = starts_with("new_"),
    ...
```
:::

::::

## Let’s look at some education data

Load the `exam1.csv` data from the course website or from your cloned course repo

* Did you clone the course repo? 

Start a new `R` script or qmd

```{r, eval=FALSE}
library(tidyverse)
library(here)
exam <- read_csv(here("data", "exam1.csv"))
```

## exam1 data

```{r, echo=FALSE}
(exam <- read_csv(here("data", "exam1.csv")))

```

## Talk with a neighbor

* Are these data tidy?
* If not, what needs to happen to make them tidy?
* What are the variables? What are the values?

```{r, echo=FALSE}
countdown(minutes = 3, seconds = 0, bottom = 0, warn_when = 30)
```

## exam1 data

What do we want?

. . .

Let’s change all `item` variables into two variables: `item` and `score`

. . .

```{r, echo=FALSE}
exam %>% 
  pivot_longer(
    cols = starts_with("item"),
    names_to = "item",
    values_to = "score"
  )
```

## Try to tidy! {.smaller}

Necessary arguments

* `data` - of course
* `cols` – which columns you will pivot longer
* `names_to` – new variable name (in quotes) for those `cols`
    + *"item"*
* `values_to` – new variable name (in quotes) for the cell values
    + *"score"*

```{r, echo=FALSE}
countdown(minutes = 5, seconds = 0, bottom = 0, warn_when = 30)
```

**Don't look ahead!**

## exam1 tidy

```{r}
exam %>% 
  pivot_longer(
    cols = starts_with("item"),
    names_to = "item",
    values_to = "score"
  )
```

## exam1 tidy

Let's go one step further

```{r}
#| code-line-numbers: "|5"
exam %>% 
  pivot_longer(
    cols = starts_with("item"),
    names_to = "item",
    names_prefix = "item_", 
    values_to = "score"
  )

```

## exam1 tidy {.smaller}

And another step

```{r}
#| code-line-numbers: "|6"
(exam_tidy <- exam %>% 
  pivot_longer(
    cols = starts_with("item"),
    names_to = "item",
    names_prefix = "item_",
    names_transform = list(item = as.integer),
    values_to = "score"
  ))
```

. . .

Why not quotes around *item* here, but quotes as it appears in `names_to`?

## One more look at `names_prefix = `

```{r}
#| code-line-numbers: "|4"
who_r %>%
 pivot_longer(
  cols = new_sp_m_014:new_rel_f_65,
  names_to = c("new", "diagnosis", "sex", "age"), 
  names_sep = "_",
  values_to = "count"
)
```


## One more look at `names_prefix`

```{r, highlight.output=c(2)}
#| code-line-numbers: "|5"
who_r %>%
 pivot_longer(
  cols = new_sp_m_014:new_rel_f_65,
  names_to = c("diagnosis", "sex", "age"), 
  names_prefix = "new_",
  names_sep = "_",
  values_to = "count"
)
```

## Why are tidy data useful?

**Question**: How would we calculate the `prop`ortion of students responding correctly to each item?

```{r, echo=FALSE}
#| output-location: fragment

exam_tidy %>% 
  group_by(item) %>% 
  summarize(prop = mean(score))
```

## Why are tidy data useful?

**Answer**: We `group_by(item)` and `summarize()`

```{r}
exam_tidy %>% 
  group_by(item) %>% 
  summarize(prop = mean(score))
```

## Why are tidy data useful?

**Question**: What if we wanted to know the `prop`ortion correct for each item by gender?

```{r}
#| output-location: fragment

exam_tidy %>% 
  group_by(item, gender) %>% 
  summarize(prop = mean(score))
```

## More data

Load the `year-end_scores.csv` data from the course website or from your cloned course repo
    
Name the data `scores`

```{r}
#| output-location: fragment
(scores <- read_csv(here("data", "year-end_scores.csv")))
```

## Talk as a class

* Are these data tidy?
    + If you wanted to summarize scores, or plot and use facet, what would you use to `group_by()` or `facet_wrap()`?
* What do we need to do to make these tidy?
    + What `pivot_longer()` arguments do we need?

. . .

Work as a class to tidy, name new data `scores_tidy`

```{r, echo=FALSE}
countdown(minutes = 3, seconds = 0, bottom = 0, warn_when = 30)
```

```{r, include=FALSE}
scores_tidy <- scores %>% 
  pivot_longer(
    cols = c(math, read),
    names_to = "content",
    values_to = "score"
  )
```

## Let's try another

Load the `longitudinal_sim.csv` data from course website or your cloned course repo

Name the data `sim`
  
```{r}
sim <- read_csv(here("data", "longitudinal_sim.csv"))
```

## Talk with a neighbor

* Are these data tidy?
    + If you wanted to summarize scores, or plot and use facet, what would you use to `group_by()` or `facet_wrap()`?
* What do we need to do to make these tidy?
    + What `pivot_longer()` arguments do we need?

. . .

Work with your neighbor to tidy, name new data `tidy_sim`

```{r, echo=FALSE}
countdown(minutes = 5, seconds = 0, bottom = 0, warn_when = 30)
```

Tell me your solutions [demo a couple]{style='color:#D55E00'}

```{r, include=FALSE}
sim_tidy <- sim %>% 
  pivot_longer(
    cols = -1,
    names_to = c("wave", "content"),
    names_sep = "_",
    values_to = "score",
    names_prefix = "wave_"
  )
```

## Other possible issues {.smaller}

The `hiv` data

```{r}
hiv <- read_csv(here("data", "hiv.csv"))
```

## Other possible issues {.smaller}

Let's make some manipulations to get a sample of the data

* (just `{dplyr}` variety `filter()` and `select()`) 

```{r}
(hiv_r <- hiv %>% 
  filter(country == "France" |
          country == "South Africa" |
            country == "United States") %>% 
  select(country, `1979`, `1989`, `1999`, `2009`))
```

. . .

* Are these data tidy?
* How would you add a new variable - say, *percent HIV*?
* Discuss how you would transform these data, if at all

## Tidy the data

```{r}
(hiv_tidy <- hiv_r %>% 
  pivot_longer(
    cols = -1,
    names_to = "year",
    values_to = "percentage"
  )
)
```

## Let's plot it

```{r}
hiv_tidy %>% 
  ggplot(aes(year, percentage, color = country, group = country)) +
  geom_point(size = 4) +
  geom_line(size = 2)
```

## Let's plot it

There is a problem with the data – what is it?

```{r, echo=FALSE}
hiv_tidy %>% 
  ggplot(aes(year, percentage, color = country, group = country)) +
  geom_point(size = 4) +
  geom_line(size = 2)
```

. . .

Why aren’t lines connecting for the United States?

## Missing data

```{r}
hiv_tidy
```

## Drop `NA`s

```{r, eval=FALSE}
hiv_tidy %>% 
  drop_na(percentage)
```

**OR**

(not generally ideal unless you are **certain** you can remove these missing data)

```{r}
#| code-line-numbers: "|7"
hiv_tidy <- hiv_r %>% 
  pivot_longer(
    cols = -1,
    names_to = "year",
    values_to = "percentage",
    names_transform = list(year = as.integer),
    values_drop_na = TRUE
  )
```

## Plot again

```{r}
hiv_tidy %>% 
  ggplot(aes(year, percentage, color = country, group = country)) +
  geom_point(size = 4) +
  geom_line(size = 2)
```

# `pivot_wider()`

## [`pivot_wider()`](https://tidyr.tidyverse.org/reference/pivot_wider.html)

Tidy data are excellent when conducting preliminary descriptive analyses, plotting data, linear models

* Occasionally, you need the data in a different format
    + For example, if you're using other packages for analysis

## `pivot_wider()`

:::: {.columns}

::: {.column width="40%"}
```{r, eval=FALSE}
pivot_wider(
  data,
  ...,
  id_cols = NULL,
  names_from = name,
  names_prefix = "",
  names_sep = "_",
  names_glue = NULL,
  names_sort = FALSE,
  names_vary = "fastest",
  names_expand = FALSE
  names_repair = "check_unique",
  values_from = value,
  values_fill = NULL,
  values_fn = NULL,
  unused_fn = NULL
)
```
:::

::: {.column width="60%"}

:::

::::

## `pivot_wider()`

:::: {.columns}

::: {.column width="40%"}
```{r, eval=FALSE}
#| code-line-numbers: "|2,5,13"
pivot_wider(
  data,
  ...,
  id_cols = NULL,
  names_from = name,
  names_prefix = "",
  names_sep = "_",
  names_glue = NULL,
  names_sort = FALSE,
  names_vary = "fastest",
  names_expand = FALSE
  names_repair = "check_unique",
  values_from = value,
  values_fill = NULL,
  values_fn = NULL,
  unused_fn = NULL
)
```
:::

::: {.column width="60%"}

:::

::::

## `pivot_wider()`

:::: {.columns}

::: {.column width="40%"}
```{r, eval=FALSE}
pivot_wider(
  data, 
  names_from = name, 
  values_from = value 
)
```
:::

::: {.column width="60%"}

:::

::::


## `pivot_wider()`

:::: {.columns}

::: {.column width="40%"}
```{r, eval=FALSE}
#| code-line-numbers: "3"
pivot_wider(
  data, 
  names_from = name, 
  values_from = value 
)
```
:::

::: {.column width="60%"}
The names of the (tidy) column (or columns) from which to get the name of the new data columns
:::

::::

## `pivot_wider()`

:::: {.columns}

::: {.column width="40%"}
```{r, eval=FALSE}
#| code-line-numbers: "4"
pivot_wider(
  data, 
  names_from = name, 
  values_from = value 
)
```
:::

::: {.column width="60%"}
The names of the (tidy) column (or columns) from which to get the the cell values
:::

::::

## An example

`tidyr::fish_encounters`: when fish swimming down a river are detected by automatic monitoring stations

```{r}
tidyr::fish_encounters
```

## An example

So tidy, so nice...let's muck it up

```{r}
fish_encounters %>% 
  pivot_wider(
    names_from = station, 
    values_from = seen,
)
```

## An example

That's a lot of `NA` values. But are they really "missing"?

```{r}
fish_encounters %>% 
  pivot_wider(
    names_from = station, 
    values_from = seen,
)
```

## An example

Those `NA`s should be zeroes.

```{r}
#| code-line-numbers: "|5"
#| output-location: fragment
fish_encounters %>% 
  pivot_wider(
    names_from = station, 
    values_from = seen,
    values_fill = list(seen = 0)
)
```

## Remember `scores_tidy`?

```{r}
scores_tidy
```

## Untidy `scores_tidy` {.smaller}

:::: {.columns}

::: {.column width="50%"}
```{r}
scores_tidy %>% 
  pivot_wider(
    names_from = content,
    values_from = score
  )
```
:::

::: {.column width="50%" .fragment}
Same as the original data

```{r}
read_csv(here("data", "year-end_scores.csv"))
```

:::

::::

## Let's do this together {.smaller}

Use `pivot_wider()` to change *sim_tidy* back to *sim*

:::: {.columns}

::: {.column width="250%"}
```{r}
sim_tidy
```
:::

::: {.column width="75%"}
```{r}
sim
```
:::

::::

## Longer then wider {.smaller}

Some problems can’t be solved by pivoting in a single direction

Here is an example of how you might combine `pivot_longer()` and `pivot_wider()` to solve more complex problems

. . .

```{r}
sim2 <- read_csv(here("data", "longitudinal_sim2.csv"))
sim2
```

. . .

[View() data]{style='color:#D55E00'}

## First `pivot_longer()`

```{r}
#| error: true
sim2 %>% 
  pivot_longer(
    cols = -1,
    names_to = c("variable", "grade"),
    values_to = "values",
    names_sep = "_")
```

## Combine `numeric` & `character` - `as.character`

```{r}
#| code-line-numbers: "7"
sim2 %>% 
  pivot_longer(
    cols = -1,
    names_to = c("variable", "grade"),
    values_to = "values",
    names_sep = "_",
    values_transform = list(values = as.character)) # to combine numeric & character 
```

## One of my favorite functions - `parse_number()`

```{r}
#| code-line-numbers: "|8"
sim2 %>% 
  pivot_longer(
    cols = -1,
    names_to = c("variable", "grade"),
    values_to = "values",
    names_sep = "_",
    values_transform = list(values = as.character)) %>% 
  mutate(grade = parse_number(grade)) 
```

## Then `pivot_wider()`

```{r}
#| code-line-numbers: "|9,10,11"
#| output-location: fragment
sim2 %>% 
  pivot_longer(
    cols = -1,
    names_to = c("variable", "grade"),
    values_to = "values",
    names_sep = "_",
    values_transform = list(values = as.character)) %>% 
  mutate(grade = parse_number(grade)) %>% 
  pivot_wider( 
    names_from = variable, 
    values_from = values 
  )
```
## 
![](https://cdn.myportfolio.com/45214904-6a61-4e23-98d6-b140f8654a40/40488240-4609-4dc3-8920-693e078b55ce_rw_1920.jpg?h=2e96a7e21e19c43867546498da026649)

::: aside
Credit [Allison Horst](https://allisonhorst.com/data-science-art)
:::

# Next time

## Before next class

* Final Project
    + [Final Project: Draft Data Script]{style='color:#FF0000'}
* Homework
    + **Homework 9**
* Reading
    + [R4DS(2e) 17](https://r4ds.hadley.nz/factors)
* AMA

# Homework 9


