---
title: "Homework 8"
format: html
execute: 
  echo: false
  message: false
  warning: false
embed-resources: true
---

```{r setup, include=FALSE}
#| label: load-packages
#| include: false

library(tidyverse)
library(here)
library(ggthemes)
```

# Getting Started

The data for this homework comes from the [Open University Learning Analytics Dataset (OULAD)](https://analyse.kmi.open.ac.uk/open_dataset). It contains data about courses, students, and their interactions with Virtual Learning Environment (VLE) for seven selected courses (called modules). Presentations of courses start in February and October - they are marked by "B" and "J" respectively. The dataset (tables) are connected using unique identifiers. All datasets are stored in the .csv format. Please check out the [OULAD](https://analyse.kmi.open.ac.uk/open_dataset) site to learn more about the data and understand the keys.

### 1. Start a new RStudio Project

#### 1.1. Be sure to add a folder for "data" and "scripts".

### 2. Data

#### 2.1. Download the *studentInfo.csv*, *studentAssessment.csv*, and *assessments.csv* data from the course website.

#### 2.2. Place the files in the "data" folder in your project.

#### 2.3. Read in the data.

```{r}
#| label: load-data

studentinfo <- read_csv(here("data", "studentInfo.csv"))

studentassessment <- read_csv(here("data", "studentAssessment.csv"))

assessments <- read_csv(here("data", "assessments.csv"))

```

### 3. Join

#### 3.1. Join the *studentassessment* data and the *assessments* data. Specify to join by `id_assessment` and `date`. *Note* that the `date` column has a different name in *studentassessment* (`date_submitted`). Name the joined data *assess_full*. Filter *assess_full* to remove `NA` values in the `code_module` column. 

```{r}
#| label: join-1

assess_full <- studentassessment %>% 
  left_join(assessments, join_by(id_assessment, date_submitted == date)) %>% 
  filter(!is.na(code_module))
```

#### 3.2. Join the *studentinfo* data to the newly created *assess_full* data. Name the joined data *student*.

```{r}
#| label: join-2

student <- assess_full %>% 
  left_join(studentinfo)
```

#### 3.3. What key(s) were used in the join?

id_student, code_module, code_presentation

#### 3.4. How many rows are in the newly created *student* data? If that is different than the number of rows in the *studentInfo* data, why?

There are `r nrow(studentinfo)` rows in studentInfo and only `r nrow(student)` rows in student because we removed rows with missing values in the `code_module` variable.

#### 3.5. What new variables were added with this join?

`r setdiff(names(student), names(assess_full))`

### 4. Wrangle

#### 4.1. From the *student* data, create a new dataset named *student_tma* that consists only of TMA (Tutor Marked Assessment) assessments.

```{r}
student_tma <- student %>% 
  filter(assessment_type == "TMA")
```

#### 4.2. Create a new dataset named *student_tma_max*. First, remove `NA` values in the `score` column. Then keep only the maximum (`max()`) TMA score for each student (**note:** Use `mutate()` and `filter()` so that all columns are retained)

```{r}
student_tma_max <- student_tma %>%
  filter(!is.na(score)) %>% 
  group_by(id_student) %>% 
  mutate(max = max(score, na.rm = TRUE)) %>%
  filter(score == max(score, na.rm = TRUE)) 
```

#### 4.3. How many rows are in this filtered data? What does each row represent?

Each of the `r nrow(student_tma_max)` rows represents a student.

#### 4.4. From *student_tma_max*, reate a dataset named *agg_tma_max* that contains the mean TMA `score` by `highest_education`, `disability`, and `final_result.`

```{r}
agg_tma_max <- student_tma_max %>%
  group_by(highest_education, disability, final_result) %>%
  summarize(tma_mean = mean(score, na.rm = TRUE))
```

### 5. Plot

#### 5.1. Reproduce the following plot, using any theme and colors you want *except* for the defaults.

```{r}
agg_tma_max %>%
  mutate(
    highest_education = factor(highest_education, level = c("Post Graduate Qualification", "HE Qualification", "A Level or Equivalent", "Lower Than A Level", "No Formal quals")),
    final_result = factor(final_result, level = c("Withdrawn", "Fail", "Pass", "Distinction"))) %>% 
  ggplot(aes(tma_mean, final_result, fill = disability)) +
  geom_col(position = "dodge") +
  facet_wrap(~highest_education, ncol = 1) +
  theme_minimal() +
  scale_fill_colorblind() +
  labs(
    title = "Average TMA Scores",
    subtitle = "by education level, disability status, and final result designation",
    x = "Mean Tutor Marked Assessment (TMA)",
    y = "Final Result Designation",
    fill = "Disability Status",
    caption = "Data from Kuzilek, Hlosta, & Zdrahal (2017). \nhttps://analyse.kmi.open.ac.uk/open_dataset"
  )
```
